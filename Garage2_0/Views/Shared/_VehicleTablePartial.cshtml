@*@model IEnumerable<Vehicle>*@


@model PaginatedList<Vehicle>

@{
    var sortString = Convert.ToString(ViewData["CurrentSort"]);
    var regArrow = sortString == "regnr_desc" ? "up" : "down";
    var dateArrow = sortString == "date_desc" ? "down" : "up";
}

<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().RegistrationNr)
                <a asp-action="Index" asp-route-sortOrder="@ViewData["RegSortParm"]"><i class="bi bi-caret-@regArrow-fill" style="vertical-align:middle"></i></a>
                @*@Html.DisplayNameFor(model => model.FirstOrDefault().RegistrationNr)*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().TimeOfArrival)<a asp-action="Index" asp-route-sortOrder="@ViewData["DateSortParm"]"><i class="bi bi-caret-@dateArrow-fill" style="vertical-align:middle"></i></a>
@*                @Html.DisplayNameFor(model => model.FirstOrDefault().TimeOfArrival)*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().VehicleType)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Brand)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Model)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.FirstOrDefault().Color)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td class="text-uppercase">
                    @Html.DisplayFor(modelItem => item.RegistrationNr)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.TimeOfArrival)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.VehicleType)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Brand)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Model)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Color)
                </td>

                <td>
                    <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                    <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                    <a asp-action="Delete" asp-route-id="@item.Id">Check out</a>
                </td>
            </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div class="d-flex align-items-center">
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex - 1)"
       class="btn btn-default border border-gray @prevDisabled">
        @("<") Previous
    </a>
    <a asp-action="Index"
       asp-route-sortOrder="@ViewData["CurrentSort"]"
       asp-route-pageNumber="@(Model.PageIndex + 1)"
       class="btn btn-default border border-gray px-4 mx-3 @nextDisabled">
        Next @(">")
    </a>
    <label class="">( Page @(Model.PageIndex + "/" + Model.TotalPages) )</label>
</div>


